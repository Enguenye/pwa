{"version":3,"sources":["Heroe.js","joke.js","serviceWorker.js","index.js"],"names":["Heroe","className","this","props","info","name","description","comics","available","items","map","e","i","key","series","urls","url","Component","Joke","state","inform","console","log","navigator","onLine","localStorage","getItem","setState","fetch","then","res","json","data","results","setItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c09f613.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Heroe extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card text-white bg-secondary mb-3\">\r\n                <div className=\"card-body\"> \r\n                <ol>\r\n               <li><h3>Nombre: {this.props.info.name}</h3> </li>\r\n               <li> <h5>Descipcion: {this.props.info.description}</h5></li>\r\n               <li><h5>Comics disponibles:{this.props.info.comics.available}</h5> </li>\r\n               <ul>{this.props.info.comics.items.map((e,i)=><h6 key ={i}><li key ={i} >{e.name}></li></h6>)}</ul>\r\n               <li><h5>Series disponibles:{this.props.info.series.available}</h5> </li>\r\n               <ul> {this.props.info.series.items.map((e,i)=><h6 key ={i}><li key ={i} >{e.name}</li></h6>)}</ul>\r\n               <li> <h5>Urls:</h5> </li>\r\n               <ul>{this.props.info.urls.map((e,i)=><h6 key ={i}><li key ={i} >{e.url}</li></h6>)}</ul>\r\n               </ol>\r\n               </div>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Heroe;","import React, { Component } from 'react';\r\nimport Heroe from './Heroe';\r\n\r\nclass Joke extends Component {\r\n    state={\r\n        info:[]\r\n    }\r\n    render() {\r\n        let inform = this.state.info;\r\n        console.log(inform);\r\n        return (\r\n            <div>\r\n                <h1>Heroes:</h1>\r\n                {inform.map( (e,i) =>\r\n<Heroe key={i} info={e}/>)}\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        if (!navigator.onLine) {\r\n            if (localStorage.getItem('info') === null)\r\n                this.setState({ info: \"loading...\" })\r\n            else\r\n                this.setState({ info: localStorage.getItem('info') });\r\n        }\r\n      \r\n        fetch(\"https://gateway.marvel.com:443/v1/public/characters?ts=marvel&hash=4c34e64969b786bf216564d403dcb6dd&apikey=e7005cfba84391c5032fd91b65b9bcb1\")\r\n          .then(res => {\r\n              return res.json();\r\n          }).then(res => {\r\n              this.setState({ info: res.data.results });\r\n              localStorage.setItem('info', res.data.results);\r\n          });\r\n      }\r\n}\r\n\r\n\r\nexport default Joke;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Joke from './joke';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Joke />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}